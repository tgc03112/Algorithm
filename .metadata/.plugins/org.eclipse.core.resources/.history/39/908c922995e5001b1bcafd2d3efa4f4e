package BOJ2623_음악프로그램;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N,M;

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());	//가수
		M = Integer.parseInt(st.nextToken());	//보조 PD
		
		ArrayList<Integer>[] list = new ArrayList[N+1];
		int[] indegree = new int[N+1];	//해당 노드를 가리키는 간선의 개수를 담기 위한 배열
		
		for(int i=0;i<N+1;i++) {
			list[i] = new ArrayList<>();
		}
		
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int num = Integer.parseInt(st.nextToken());	//보조 PD가 담당한 가수의 수
			
			int idx = Integer.parseInt(st.nextToken());	//가수들의 순서 추가
			
			for(int j=0;j<num-1;j++) {
				int time = Integer.parseInt(st.nextToken());
				list[idx].add(time);
				indegree[time]++;
				
				idx=time;
			}
		}
		
		Queue<Integer> queue = new LinkedList<>();
		
		//indegree가 0인 경우 해당 가수를 Queue에 넣음
		for(int i=1;i<N+1;i++) {
			if(indegree[i]==0) {
				queue.add(i);
			}
		}
		
		ArrayList<Integer> result = new ArrayList<>();
		
		while(!queue.isEmpty()) {
			int now = queue.poll();
			result.add(now);
			
			//한 가수에게 연결된 다른 가수들의 차수를 하나씩 낮추고  indegree가 0이 되면 Queue에 넣음
			for(int i : list[now]) {
				indegree[i]--;
				
				if(indegree[i]==0) {
					queue.add(i);
				}
			}
		}
		
		//result의 크기가 N이 아니라는 것은 사이클이 발생한 것 -> 진입 차수가 0인 가수를 Queue에 넣지 못한다
		//순서를 정할수 없는 경우 -> 0을 출력함
		if(result.size()!=N) {
			System.out.println(0);
			return;
		}
		for(int i : result) {
			System.out.println(i);
		}
				
		
	}
}







